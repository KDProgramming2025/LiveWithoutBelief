====================
MoSCoW PRIORITIZATION
====================
Must Have (M)
1. Android app foundation (Kotlin, Jetpack Compose, MVVM modular architecture already scaffolded) hardened for production.
2. Secure backend (NodeJs Typescript) serving article manifest & content with versioning.
3. Word-authored (.docx) article ingestion pipeline converting to HTML (preserving headings, lists, images, basic formatting) + plain text + asset extraction + checksum & versioning.
4. Client content sync: delta detection via manifest (version/hash) and redownload changed articles/assets.
5. Offline storage (Room) for articles, assets, bookmarks, annotations.
6. Google Sign-In using Firebase Auth (Credential Manager) single-tap login.
7. User-specific private annotations & discussion threads (text + image attachments) not visible to others.
8. Bookmarking (add/remove) & simple folder organization.
9. Search (full-text local across title & body) & filters (bookmarked, recent, by word count range, updated date).
10. Light & dark theme (Material 3 dynamic color where available).
11. Telemetry: basic crash reporting & usage analytics (Firebase Crashlytics + Analytics) respecting privacy.
12. CI/CD pipelines: build, test, lint, detekt, unit tests, instrumentation tests, security scan, release build signing, Play internal track deploy.
13. Comprehensive automated tests (unit, DB, repository, UI snapshot, instrumentation smoke) with minimum coverage threshold.
14. Documentation: README, contribution guide, architecture decision records, API contract docs, content authoring guide.
15. App & server security hardening (HTTPS, auth tokens, rate limiting, secure storage of tokens, dependency vulnerability scanning).
16. Accessibility compliance (scalable text, contrast, TalkBack labels, heading semantics in rendered HTML).

Should Have (S)
1. Progressive pagination in reader (page-like vertical chunking) & reading progress persistence.
2. In-app settings (theme override, text size, line spacing, reading mode, analytics opt-in/out).
3. Auto-sync background worker with constraints (Wi-Fi, charging) & manual sync trigger.
4. Annotation selection UX: highlight selected text range with handles inline.
5. Attachment support in discussions: images (gallery/camera), audio notes, PDF.
6. App update in-app notice when manifest schema version changes.
7. Basic server-side admin web UI for content ingestion queue status & user support view (no user content cross-exposure).
8. Tagging taxonomy for articles (science, history, logic) & filter by tag.
9. Multi-window & large screen adaptive layouts.
10. Localized architecture (i18n ready resource & content metadata; language switch stub, defers translation content).

Could Have (C)
1. Reading statistics for user (time spent, words read) locally.
2. Smart recommendations (rule-based initially) for next article.

Won't Have (W) (for initial public launch)
1. Public social commentary or multi-user shared threads.
2. Gamification (badges, leaderboards) in MVP.
3. AI content generation.
4. Offline collaborative sync between multiple user devices (beyond basic cloud backup).
5. Monetization (ads, IAP) at launch.
